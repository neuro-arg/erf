optimizations (use HashSets and intern type constraints)
this is hard to do with diagnostics, but the groundwork is done
that is, i will have to throw away graphviz debug output but error diagnostics will be kept

(to do it, just change TypeCk::{pos,neg} to be OrderedSets, this will ensure most types stay compact-ish)

for best performance, figure out how to ensure ConstraintGraph::constraints hashes ids semantically
(maybe split ids into "shape id" and "type id", and use OrderedMap<ShapeId, TypeId>?)



- only retain new query generations in flows for optimization

- allow matching on multiple patterns
^this requires checking whether pos can *sometimes* be used in neg, not whether it *always* can be used in neg.
how to do it? well, a potential solution is creating a separate query for every new inflow.
Sounds slow, but what else can you realistically do here?
^if match patterns are kept small (if cuts are well placed), this won't be super bad actually
